# Strassen Matrix Algorithm                                                                    
                                                                                                   201801658 김현성
                                                                                                      
### 슈트라센 알고리즘 (Strassen Algorithm) 이란 행렬 곱셈 알고리즘이다.
우리가 배운 분할 정복 알고리즘 중에 하나이며, 독일의 수학자인 폴커 스트라센에 의해 고안되었다. 행렬의 곱셉을 더하기 연산으로 풀어 각 원소를 구할 수 있는 연산 행렬로 표현한다. 



  알고리즘의 작동 구조는 다음과 같다
  
  
  - 부분행렬로 나눈다.
  - 10개의 행렬 S1,S2, … , S10을 만든다. 각 행렬의 크기는 n/2 * n/2 이다.
  - 1단계에서 만든 부분행렬과 2단계에서 만든 10개의 행렬을 이용해 7개의 행렬 곱 P1,P2,…,P7을 계산한다. 여기 또한 각 행렬의 크기는 n/2 * n/2 이다.
  - 행렬들의 다양한 조합을 더하거나 빼서 얻고자한 결과 행렬 C의 부분 행렬 C11,C12,C21,C22를 계산한다.

  위 과정을 통하여 Strassen Algorithm 을 얻게된다.
  
  ### 예시)
  
  
  <p align="center"><img width="700" alt="strassen" src="https://user-images.githubusercontent.com/80371590/116005034-46bf6c00-a640-11eb-9b17-fd14c1ba087e.png">
 
 
  ### 시간복잡도)
  
  `단순 알고리즘`의 행렬 곱셉 같은 경우는 입력의 크기를 행과 열의 수를 n이라고 하면,
  
 <p align="center"><img width="500" alt="strassen" src="https://user-images.githubusercontent.com/80371590/116005407-b7b35380-a641-11eb-9459-bd1e9e00abb0.png">
  
 
 `Strassen Algorithm`의 경우는, 


 <p align="center"><img width="500" alt="strassen" src="https://user-images.githubusercontent.com/80371590/116005570-838c6280-a642-11eb-8fc0-106da6f09a4f.png">

> ==> `정의에 따라 n×n 크기의 두 행렬을 곱하면 O(n3)의 시간이 소요되지만 이 알고리즘은 대략 O(n2.807)의 시간이 소요된다.`


  ### 코드)
  
```java
import java.util.Scanner;

public class Strassen {
    public int[][] multiply(int[][] A, int[][] B)
    {
        int n = A.length;
        int[][] S = new int[n][n];
        if (n == 1)
            S[0][0] = A[0][0] * B[0][0];
        else
        {
            int[][] A11 = new int[n/2][n/2];
            int[][] A12 = new int[n/2][n/2];
            int[][] A21 = new int[n/2][n/2];
            int[][] A22 = new int[n/2][n/2];
            
            int[][] B11 = new int[n/2][n/2];
            int[][] B12 = new int[n/2][n/2];
            int[][] B21 = new int[n/2][n/2];
            int[][] B22 = new int[n/2][n/2];
        
            split(A, A11, 0 , 0);
            split(A, A12, 0 , n/2);
            split(A, A21, n/2, 0);
            split(A, A22, n/2, n/2);
           // 행렬 A를 4개로 나누기 //
            split(B, B11, 0 , 0);
            split(B, B12, 0 , n/2);
            split(B, B21, n/2, 0);
            split(B, B22, n/2, n/2);
            // 행렬 B를 4개로 나누기 //


            int [][] M1 = multiply(add(A11, A22), add(B11, B22));   //   M1 = (A11 + A22)(B11 + B22)
            int [][] M2 = multiply(add(A21, A22), B11);             //   M2 = (A21 + A22) B11
            int [][] M3 = multiply(A11, sub(B12, B22));             //   M3 = A11 (B12 - B22)
            int [][] M4 = multiply(A22, sub(B21, B11));             //   M4 = A22 (B21 - B11)
            int [][] M5 = multiply(add(A11, A12), B22);             //   M5 = (A11 + A12) B22
            int [][] M6 = multiply(sub(A21, A11), add(B11, B12));   //   M6 = (A21 - A11) (B11 + B12)
            int [][] M7 = multiply(sub(A12, A22), add(B21, B22));   //   M7 = (A12 - A22) (B21 + B22)


            int [][] C11 = add(sub(add(M1, M4), M5), M7);       //  C11 = M1 + M4 - M5 + M7
            int [][] C12 = add(M3, M5);                         //  C12 = M3 + M5
            int [][] C21 = add(M2, M4);                         //  C21 = M2 + M4
            int [][] C22 = add(sub(add(M1, M3), M2), M6);       //  C22 = M1 - M2 + M3 + M6


            join(C11, S, 0 , 0);
            join(C12, S, 0 , n/2);
            join(C21, S, n/2, 0);
            join(C22, S, n/2, n/2);
        }

        return S;    // 결과 반환
    }

    public int[][] sub(int[][] A, int[][] B)      // 두 행렬 뺄셈
    {
        int n = A.length;
        int[][] C = new int[n][n];
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
                C[i][j] = A[i][j] - B[i][j];
        return C;
        // 두 행렬의 기능
    }

    public int[][] add(int[][] A, int[][] B)       // 두 행렬 덧셈
    {
        int n = A.length;
        int[][] C = new int[n][n];
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
                C[i][j] = A[i][j] + B[i][j];
        return C;
    }

    public void split(int[][] P, int[][] C, int iB, int jB)
    {
        for(int i1 = 0, i2 = iB; i1 < C.length; i1++, i2++)
            for(int j1 = 0, j2 = jB; j1 < C.length; j1++, j2++)
                C[i1][j1] = P[i2][j2];
            // 부모 행렬을 자식 행렬로 분할하는 기능
    }

    public void join(int[][] C, int[][] P, int iB, int jB)
    {
        for(int i1 = 0, i2 = iB; i1 < C.length; i1++, i2++)
            for(int j1 = 0, j2 = jB; j1 < C.length; j1++, j2++)
                P[i2][j2] = C[i1][j1];
            // 부모 매트릭스에서 자식 매트릭스를 결합하는 기능
    }

    public static void main (String[] args)
    {
        Scanner scan = new Scanner(System.in);
        Strassen s = new Strassen();

        System.out.println("n을 입력하세요. :");
        int N = scan.nextInt();

        System.out.println("행렬 1의 n을 입력하세요.\n");
        int[][] A = new int[N][N];
        for (int i = 0; i < N; i++)
            for (int j = 0; j < N; j++)
                A[i][j] = scan.nextInt();

        System.out.println("행렬 2의 n을 입력하세요.\n");
        int[][] B = new int[N][N];
        for (int i = 0; i < N; i++)
            for (int j = 0; j < N; j++)
                B[i][j] = scan.nextInt();

        int[][] C = s.multiply(A, B);

        System.out.println("\n행렬 A와 B의 곱 : ");
        for (int i = 0; i < N; i++)
        {
            for (int j = 0; j < N; j++)
                System.out.print(C[i][j] +" ");
            System.out.println();
        }

    }
}
```


### 코드 설명)

: 행렬의 수를 정하는 n과 행렬 A와 B에 들어갈 숫자를 각각 입력하면 덧셈과 뺄셈을 통해 최종적인 행렬 A와 B의 곱을 구하게 된다.
  - 입력 : 행렬의 수를 정하는 n, 행렬 A와 B에 각각 들어갈 숫자
  - 출력 : 행렬 A와 B의 곱

<img width="200" alt="strassen" src="https://user-images.githubusercontent.com/80371590/116239804-0bd34a80-a79e-11eb-8d20-4ed20785c230.png">

### 결론 도출)

|      |  **행렬 A**	| **행렬 B** |      |
  | ---- | ---- | ---- | ---- | 
 | **A11**  |  1 	|  **B11**	| 5	| 
  | **A12** | 3 | **B12** | 4 |  
  | **A21** | 4 |	**B21**	| 9	| 
  |**A22**| 7 |	**B22**	|	8 | 	
  
  - C11 = (A11*B11)+(A12*B21) = (1*5) + (3*9) = 32
  - C12 = (A11*B12)+(A12*B22) = (1*4) + (3*8) = 28
  - C21 = (A21*B11)+(A22*B21) = (4*5) + (7*9) = 83
  - C22 = (A21*B12)+(A22*B22) = (4*4) + (7*8) = 72

 = > 32 28
     83 72
     
### 소스 코드
- sub 메소드
```java
 public int[][] sub(int[][] A, int[][] B)      // 두 행렬 뺄셈
    {
        int n = A.length;
        int[][] C = new int[n][n];
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
                C[i][j] = A[i][j] - B[i][j];
        return C;
 ```
- add 메소드
```java
 public int[][] add(int[][] A, int[][] B)       // 두 행렬 덧셈
    {
        int n = A.length;
        int[][] C = new int[n][n];
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
                C[i][j] = A[i][j] + B[i][j];
        return C;
```
- split 메소드
```java
public void split(int[][] P, int[][] C, int iB, int jB)
    {
        for(int i1 = 0, i2 = iB; i1 < C.length; i1++, i2++)
            for(int j1 = 0, j2 = jB; j1 < C.length; j1++, j2++)
                C[i1][j1] = P[i2][j2];
            // 부모 행렬을 자식 행렬로 분할하는 기능
    }
```
- join 메소드
```java
public void join(int[][] C, int[][] P, int iB, int jB)
    {
        for(int i1 = 0, i2 = iB; i1 < C.length; i1++, i2++)
            for(int j1 = 0, j2 = jB; j1 < C.length; j1++, j2++)
                P[i2][j2] = C[i1][j1];
            // 부모 매트릭스에서 자식 매트릭스를 결합하는 기능
    }
```
- main 함수

```java
public static void main (String[] args)
    {
        Scanner scan = new Scanner(System.in);
        Strassen s = new Strassen();

        System.out.println("n을 입력하세요. :");
        int N = scan.nextInt();

        System.out.println("행렬 1의 n을 입력하세요.\n");
        int[][] A = new int[N][N];
        for (int i = 0; i < N; i++)
            for (int j = 0; j < N; j++)
                A[i][j] = scan.nextInt();

        System.out.println("행렬 2의 n을 입력하세요.\n");
        int[][] B = new int[N][N];
        for (int i = 0; i < N; i++)
            for (int j = 0; j < N; j++)
                B[i][j] = scan.nextInt();

        int[][] C = s.multiply(A, B);

        System.out.println("\n행렬 A와 B의 곱 : ");
        for (int i = 0; i < N; i++)
        {
            for (int j = 0; j < N; j++)
                System.out.print(C[i][j] +" ");
            System.out.println();
        }

    }
}
```

### 실행시간 측정)

```java
long startTime = 0;
        long endTime = 0;
        long diffTime = 0;
        
        startTime = System.currentTimeMillis();
        System.out.println("\n행렬 A와 B의 곱 : ");

        for (int i = 0; i < N; i++)
        {
            for (int j = 0; j < N; j++)
                System.out.print(C[i][j] +" ");
            System.out.println();
        }
        endTime   = System.currentTimeMillis();
        diffTime  = endTime - startTime;
        System.out.println("실행 시간 = "+ diffTime + "ms");
```
![image](https://user-images.githubusercontent.com/80371590/116245568-109afd00-a7a4-11eb-8a31-3de03d3cefe2.png)

==> 행렬의 수가 많아질수록 실행시간은 점점 길어진다.
                                                                                            
